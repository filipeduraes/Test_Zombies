// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0649
#pragma warning disable 1522
#pragma warning disable 0414
#pragma warning disable 0219
#pragma warning disable 0109

namespace Quantum {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  public enum AnimationFlag : int {
    None,
    Start,
    End,
  }
  [Flags()]
  public enum EWorldState : uint {
    None = 0,
    Idle = 1,
    CarryingTarget = 2,
    TargetDelivered = 4,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    MoveBack = 1 << 0,
    Action = 1 << 1,
    Attack = 1 << 2,
    Defend = 1 << 3,
    Jump = 1 << 4,
  }
  public static unsafe partial class InputButtons_ext {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet1024 {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[16];
    public const Int32 BitsSize = 1024;
    public Int32 Length {
      get {
        return 1024;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet1024*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 1024, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(&set->bits[0], 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet1024 FromArray(UInt64[] values) {
      Assert.Always(16 == values.Length);
      BitSet1024 result = default;
      for (int i = 0; i < 16; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 128);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 37;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 16);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet1024*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 16);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet128* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet128* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(&set->bits[0], 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 41;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(&set->bits[0], 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 43;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet256* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet256* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(&set->bits[0], 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(&set->bits[0], 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet512* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet512* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(&set->bits[0], 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet6* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet6* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet6* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet6* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIAction))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIAction : IEquatable<AssetRefAIAction>, IAssetRef<AIAction> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIAction(AIAction value) {
      var r = default(AssetRefAIAction);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIAction other && Equals(other);
    }
    public Boolean Equals(AssetRefAIAction other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIAction a, AssetRefAIAction b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIAction a, AssetRefAIAction b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIAction*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIBlackboard))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIBlackboard : IEquatable<AssetRefAIBlackboard>, IAssetRef<AIBlackboard> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIBlackboard(AIBlackboard value) {
      var r = default(AssetRefAIBlackboard);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIBlackboard other && Equals(other);
    }
    public Boolean Equals(AssetRefAIBlackboard other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIBlackboard a, AssetRefAIBlackboard b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIBlackboard a, AssetRefAIBlackboard b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIBlackboard*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIBlackboardInitializer))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIBlackboardInitializer : IEquatable<AssetRefAIBlackboardInitializer>, IAssetRef<AIBlackboardInitializer> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIBlackboardInitializer(AIBlackboardInitializer value) {
      var r = default(AssetRefAIBlackboardInitializer);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIBlackboardInitializer other && Equals(other);
    }
    public Boolean Equals(AssetRefAIBlackboardInitializer other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIBlackboardInitializer a, AssetRefAIBlackboardInitializer b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIBlackboardInitializer a, AssetRefAIBlackboardInitializer b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIBlackboardInitializer*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIConfig))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIConfig : IEquatable<AssetRefAIConfig>, IAssetRef<AIConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIConfig(AIConfig value) {
      var r = default(AssetRefAIConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefAIConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIConfig a, AssetRefAIConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIConfig a, AssetRefAIConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIFunction))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIFunction : IEquatable<AssetRefAIFunction>, IAssetRef<AIFunction> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIFunction(AIFunction value) {
      var r = default(AssetRefAIFunction);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIFunction other && Equals(other);
    }
    public Boolean Equals(AssetRefAIFunction other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIFunction a, AssetRefAIFunction b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIFunction a, AssetRefAIFunction b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIFunction*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTComposite))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTComposite : IEquatable<AssetRefBTComposite>, IAssetRef<BTComposite> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTComposite(BTComposite value) {
      var r = default(AssetRefBTComposite);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTComposite other && Equals(other);
    }
    public Boolean Equals(AssetRefBTComposite other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTComposite a, AssetRefBTComposite b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTComposite a, AssetRefBTComposite b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTComposite*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTDecorator))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTDecorator : IEquatable<AssetRefBTDecorator>, IAssetRef<BTDecorator> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTDecorator(BTDecorator value) {
      var r = default(AssetRefBTDecorator);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTDecorator other && Equals(other);
    }
    public Boolean Equals(AssetRefBTDecorator other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTDecorator a, AssetRefBTDecorator b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTDecorator a, AssetRefBTDecorator b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 97;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTDecorator*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTNode))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTNode : IEquatable<AssetRefBTNode>, IAssetRef<BTNode> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTNode(BTNode value) {
      var r = default(AssetRefBTNode);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTNode other && Equals(other);
    }
    public Boolean Equals(AssetRefBTNode other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTNode a, AssetRefBTNode b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTNode a, AssetRefBTNode b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 101;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTNode*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTRoot : IEquatable<AssetRefBTRoot>, IAssetRef<BTRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTRoot(BTRoot value) {
      var r = default(AssetRefBTRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefBTRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTRoot a, AssetRefBTRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTRoot a, AssetRefBTRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 103;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTService))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTService : IEquatable<AssetRefBTService>, IAssetRef<BTService> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTService(BTService value) {
      var r = default(AssetRefBTService);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTService other && Equals(other);
    }
    public Boolean Equals(AssetRefBTService other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTService a, AssetRefBTService b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTService a, AssetRefBTService b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 107;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTService*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(ClipData))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefClipData : IEquatable<AssetRefClipData>, IAssetRef<ClipData> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefClipData(ClipData value) {
      var r = default(AssetRefClipData);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefClipData other && Equals(other);
    }
    public Boolean Equals(AssetRefClipData other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefClipData a, AssetRefClipData b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefClipData a, AssetRefClipData b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 109;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefClipData*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(Consideration))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefConsideration : IEquatable<AssetRefConsideration>, IAssetRef<Consideration> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefConsideration(Consideration value) {
      var r = default(AssetRefConsideration);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefConsideration other && Equals(other);
    }
    public Boolean Equals(AssetRefConsideration other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefConsideration a, AssetRefConsideration b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefConsideration a, AssetRefConsideration b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 113;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefConsideration*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPAction))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPAction : IEquatable<AssetRefGOAPAction>, IAssetRef<GOAPAction> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPAction(GOAPAction value) {
      var r = default(AssetRefGOAPAction);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPAction other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPAction other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPAction a, AssetRefGOAPAction b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPAction a, AssetRefGOAPAction b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 127;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPAction*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPBackValidation))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPBackValidation : IEquatable<AssetRefGOAPBackValidation>, IAssetRef<GOAPBackValidation> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPBackValidation(GOAPBackValidation value) {
      var r = default(AssetRefGOAPBackValidation);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPBackValidation other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPBackValidation other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPBackValidation a, AssetRefGOAPBackValidation b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPBackValidation a, AssetRefGOAPBackValidation b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 131;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPBackValidation*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPGoal))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPGoal : IEquatable<AssetRefGOAPGoal>, IAssetRef<GOAPGoal> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPGoal(GOAPGoal value) {
      var r = default(AssetRefGOAPGoal);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPGoal other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPGoal other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPGoal a, AssetRefGOAPGoal b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPGoal a, AssetRefGOAPGoal b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 137;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPGoal*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPHeuristic))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPHeuristic : IEquatable<AssetRefGOAPHeuristic>, IAssetRef<GOAPHeuristic> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPHeuristic(GOAPHeuristic value) {
      var r = default(AssetRefGOAPHeuristic);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPHeuristic other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPHeuristic other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPHeuristic a, AssetRefGOAPHeuristic b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPHeuristic a, AssetRefGOAPHeuristic b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 139;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPHeuristic*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPRoot : IEquatable<AssetRefGOAPRoot>, IAssetRef<GOAPRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPRoot(GOAPRoot value) {
      var r = default(AssetRefGOAPRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPRoot a, AssetRefGOAPRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPRoot a, AssetRefGOAPRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 149;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GameInitData))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGameInitData : IEquatable<AssetRefGameInitData>, IAssetRef<GameInitData> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGameInitData(GameInitData value) {
      var r = default(AssetRefGameInitData);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGameInitData other && Equals(other);
    }
    public Boolean Equals(AssetRefGameInitData other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGameInitData a, AssetRefGameInitData b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGameInitData a, AssetRefGameInitData b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 151;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGameInitData*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMDecision))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMDecision : IEquatable<AssetRefHFSMDecision>, IAssetRef<HFSMDecision> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMDecision(HFSMDecision value) {
      var r = default(AssetRefHFSMDecision);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMDecision other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMDecision other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMDecision a, AssetRefHFSMDecision b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMDecision a, AssetRefHFSMDecision b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 157;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMDecision*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMRoot : IEquatable<AssetRefHFSMRoot>, IAssetRef<HFSMRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMRoot(HFSMRoot value) {
      var r = default(AssetRefHFSMRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMRoot a, AssetRefHFSMRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMRoot a, AssetRefHFSMRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 163;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMState))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMState : IEquatable<AssetRefHFSMState>, IAssetRef<HFSMState> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMState(HFSMState value) {
      var r = default(AssetRefHFSMState);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMState other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMState other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMState a, AssetRefHFSMState b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMState a, AssetRefHFSMState b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 167;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMState*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMTransitionSet))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMTransitionSet : IEquatable<AssetRefHFSMTransitionSet>, IAssetRef<HFSMTransitionSet> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMTransitionSet(HFSMTransitionSet value) {
      var r = default(AssetRefHFSMTransitionSet);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMTransitionSet other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMTransitionSet other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMTransitionSet a, AssetRefHFSMTransitionSet b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMTransitionSet a, AssetRefHFSMTransitionSet b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 173;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMTransitionSet*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(ItemBase))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefItemBase : IEquatable<AssetRefItemBase>, IAssetRef<ItemBase> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefItemBase(ItemBase value) {
      var r = default(AssetRefItemBase);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefItemBase other && Equals(other);
    }
    public Boolean Equals(AssetRefItemBase other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefItemBase a, AssetRefItemBase b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefItemBase a, AssetRefItemBase b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 179;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefItemBase*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(UTRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefUTRoot : IEquatable<AssetRefUTRoot>, IAssetRef<UTRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefUTRoot(UTRoot value) {
      var r = default(AssetRefUTRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefUTRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefUTRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefUTRoot a, AssetRefUTRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefUTRoot a, AssetRefUTRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 181;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefUTRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(WeaponSpec))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefWeaponSpec : IEquatable<AssetRefWeaponSpec>, IAssetRef<WeaponSpec> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefWeaponSpec(WeaponSpec value) {
      var r = default(AssetRefWeaponSpec);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefWeaponSpec other && Equals(other);
    }
    public Boolean Equals(AssetRefWeaponSpec other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefWeaponSpec a, AssetRefWeaponSpec b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefWeaponSpec a, AssetRefWeaponSpec b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 191;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefWeaponSpec*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTDataIndex {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Index;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 193;
        hash = hash * 31 + Index.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTDataIndex*)ptr;
        serializer.Stream.Serialize(&p->Index);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BlackboardEntry {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTDecorator))]
    private Quantum.Ptr ReactiveDecoratorsPtr;
    [FieldOffset(8)]
    public BlackboardValue Value;
    public QListPtr<AssetRefBTDecorator> ReactiveDecorators {
      get {
        return new QListPtr<AssetRefBTDecorator>(ReactiveDecoratorsPtr);
      }
      set {
        ReactiveDecoratorsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 197;
        hash = hash * 31 + ReactiveDecoratorsPtr.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ReactiveDecoratorsPtr = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlackboardEntry*)ptr;
        QList.Serialize(p->ReactiveDecorators, &p->ReactiveDecoratorsPtr, serializer, StaticDelegates.SerializeAssetRefBTDecorator);
        Quantum.BlackboardValue.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BotSDKData {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP ElapsedPartialTicks;
    [FieldOffset(0)]
    public Int32 ElapsedTicks;
    [FieldOffset(16)]
    public FP OriginalDeltaTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 199;
        hash = hash * 31 + ElapsedPartialTicks.GetHashCode();
        hash = hash * 31 + ElapsedTicks.GetHashCode();
        hash = hash * 31 + OriginalDeltaTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BotSDKData*)ptr;
        serializer.Stream.Serialize(&p->ElapsedTicks);
        FP.Serialize(&p->ElapsedPartialTicks, serializer);
        FP.Serialize(&p->OriginalDeltaTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Damage {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    public FP Amount;
    [FieldOffset(0)]
    public QBoolean IsDiscrete;
    [FieldOffset(8)]
    public EntityRef Origin;
    [FieldOffset(16)]
    public EntityRef Target;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 211;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + IsDiscrete.GetHashCode();
        hash = hash * 31 + Origin.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Damage*)ptr;
        QBoolean.Serialize(&p->IsDiscrete, serializer);
        EntityRef.Serialize(&p->Origin, serializer);
        EntityRef.Serialize(&p->Target, serializer);
        FP.Serialize(&p->Amount, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EntityTimer {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef Entity;
    [FieldOffset(8)]
    public FP Timer;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 223;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Timer.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EntityTimer*)ptr;
        EntityRef.Serialize(&p->Entity, serializer);
        FP.Serialize(&p->Timer, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPState {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EWorldState Negative;
    [FieldOffset(4)]
    public EWorldState Positive;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 227;
        hash = hash * 31 + (Int32)(UInt32)Negative;
        hash = hash * 31 + (Int32)(UInt32)Positive;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPState*)ptr;
        serializer.Stream.Serialize((UInt32*)&p->Negative);
        serializer.Stream.Serialize((UInt32*)&p->Positive);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HFSMData {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefHFSMState CurrentState;
    [FieldOffset(0)]
    public AssetRefHFSMRoot Root;
    [FieldOffset(16)]
    public FP Time;
    [FieldOffset(24)]
    [FramePrinter.FixedArrayAttribute(typeof(FP), 8)]
    private fixed Byte _Times_[64];
    public FixedArray<FP> Times {
      get {
        fixed (byte* p = _Times_) { return new FixedArray<FP>(p, 8, 8); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 229;
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + Root.GetHashCode();
        hash = hash * 31 + Time.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Times);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HFSMData*)ptr;
        Quantum.AssetRefHFSMRoot.Serialize(&p->Root, serializer);
        Quantum.AssetRefHFSMState.Serialize(&p->CurrentState, serializer);
        FP.Serialize(&p->Time, serializer);
        FixedArray.Serialize(p->Times, serializer, StaticDelegates.SerializeFP);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(32)]
    public Button Action;
    [FieldOffset(44)]
    public Button Attack;
    [FieldOffset(56)]
    public Button Defend;
    [FieldOffset(96)]
    public FPVector2 Direction;
    [FieldOffset(68)]
    public Button Jump;
    [FieldOffset(112)]
    public FPVector2 LookDelta;
    [FieldOffset(80)]
    public Button MoveBack;
    [FieldOffset(0)]
    public FP MovementHorizontal;
    [FieldOffset(8)]
    public FP MovementVertical;
    [FieldOffset(16)]
    public FP ViewHorizontal;
    [FieldOffset(24)]
    public FP ViewVertical;
    public const int MAX_COUNT = 6;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 233;
        hash = hash * 31 + Action.GetHashCode();
        hash = hash * 31 + Attack.GetHashCode();
        hash = hash * 31 + Defend.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + Jump.GetHashCode();
        hash = hash * 31 + LookDelta.GetHashCode();
        hash = hash * 31 + MoveBack.GetHashCode();
        hash = hash * 31 + MovementHorizontal.GetHashCode();
        hash = hash * 31 + MovementVertical.GetHashCode();
        hash = hash * 31 + ViewHorizontal.GetHashCode();
        hash = hash * 31 + ViewVertical.GetHashCode();
        return hash;
      }
    }
    public static Input Read(FrameSerializer serializer) {
      Input i = new Input();
      Serialize(&i, serializer);
      return i;
    }
    public static void Write(FrameSerializer serializer, Input i) {
      Serialize(&i, serializer);
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.MoveBack: return MoveBack.IsDown;
        case InputButtons.Action: return Action.IsDown;
        case InputButtons.Attack: return Attack.IsDown;
        case InputButtons.Defend: return Defend.IsDown;
        case InputButtons.Jump: return Jump.IsDown;
      }
      return false;
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.MoveBack: return MoveBack.WasPressed;
        case InputButtons.Action: return Action.WasPressed;
        case InputButtons.Attack: return Attack.WasPressed;
        case InputButtons.Defend: return Defend.WasPressed;
        case InputButtons.Jump: return Jump.WasPressed;
      }
      return false;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        FP.Serialize(&p->MovementHorizontal, serializer);
        FP.Serialize(&p->MovementVertical, serializer);
        FP.Serialize(&p->ViewHorizontal, serializer);
        FP.Serialize(&p->ViewVertical, serializer);
        Button.Serialize(&p->Action, serializer);
        Button.Serialize(&p->Attack, serializer);
        Button.Serialize(&p->Defend, serializer);
        Button.Serialize(&p->Jump, serializer);
        Button.Serialize(&p->MoveBack, serializer);
        FPVector2.Serialize(&p->Direction, serializer);
        FPVector2.Serialize(&p->LookDelta, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UTMomentumData {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Byte DecayAmount;
    [FieldOffset(4)]
    public Int32 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 239;
        hash = hash * 31 + DecayAmount.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UTMomentumData*)ptr;
        serializer.Stream.Serialize(&p->DecayAmount);
        serializer.Stream.Serialize(&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UTMomentumPack {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefConsideration ConsiderationRef;
    [FieldOffset(8)]
    public UTMomentumData MomentumData;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 241;
        hash = hash * 31 + ConsiderationRef.GetHashCode();
        hash = hash * 31 + MomentumData.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UTMomentumPack*)ptr;
        Quantum.AssetRefConsideration.Serialize(&p->ConsiderationRef, serializer);
        Quantum.UTMomentumData.Serialize(&p->MomentumData, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 1304;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(48)]
    public BotSDKData BotSDKData;
    [FieldOffset(16)]
    public FP DeltaTime;
    [FieldOffset(72)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(0)]
    public AssetRefMap Map;
    [FieldOffset(24)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(1008)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(8)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(32)]
    public RNGSession RngSession;
    [FieldOffset(112)]
    public BitSet1024 Systems;
    [FieldOffset(240)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[768];
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 128, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 251;
        hash = hash * 31 + BotSDKData.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRefMap.Serialize(&p->Map, serializer);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        Quantum.BotSDKData.Serialize(&p->BotSDKData, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        FixedArray.Serialize(p->input, serializer, StaticDelegates.SerializeInput);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct BTDataValue {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BTDataValue.FPVALUE)]
    private FP _FPValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BTDataValue.INTVALUE)]
    private Int32 _IntValue;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 FPVALUE = 1;
    public const Int32 INTVALUE = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public FP* FPValue {
      get {
        fixed (FP* p = &_FPValue) {
          if (_field_used_ != FPVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = FPVALUE;
          }
          return p;
        }
      }
    }
    public Int32* IntValue {
      get {
        fixed (Int32* p = &_IntValue) {
          if (_field_used_ != INTVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = INTVALUE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 257;
        hash = hash * 31 + _FPValue.GetHashCode();
        hash = hash * 31 + _IntValue.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTDataValue*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == FPVALUE) {
          FP.Serialize(&p->_FPValue, serializer);
        }
        if (p->_field_used_ == INTVALUE) {
          serializer.Stream.Serialize(&p->_IntValue);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct BlackboardValue {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.ASSETREFVALUE)]
    private AssetRef _AssetRefValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.BOOLEANVALUE)]
    private QBoolean _BooleanValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.BYTEVALUE)]
    private Byte _ByteValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.ENTITYREFVALUE)]
    private EntityRef _EntityRefValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVALUE)]
    private FP _FPValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVECTOR2VALUE)]
    private FPVector2 _FPVector2Value;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVECTOR3VALUE)]
    private FPVector3 _FPVector3Value;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.INTEGERVALUE)]
    private Int32 _IntegerValue;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 BOOLEANVALUE = 1;
    public const Int32 BYTEVALUE = 2;
    public const Int32 INTEGERVALUE = 3;
    public const Int32 FPVALUE = 4;
    public const Int32 FPVECTOR2VALUE = 5;
    public const Int32 FPVECTOR3VALUE = 6;
    public const Int32 ENTITYREFVALUE = 7;
    public const Int32 ASSETREFVALUE = 8;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public AssetRef* AssetRefValue {
      get {
        fixed (AssetRef* p = &_AssetRefValue) {
          if (_field_used_ != ASSETREFVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = ASSETREFVALUE;
          }
          return p;
        }
      }
    }
    public QBoolean* BooleanValue {
      get {
        fixed (QBoolean* p = &_BooleanValue) {
          if (_field_used_ != BOOLEANVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = BOOLEANVALUE;
          }
          return p;
        }
      }
    }
    public Byte* ByteValue {
      get {
        fixed (Byte* p = &_ByteValue) {
          if (_field_used_ != BYTEVALUE) {
            Native.Utils.Clear(p, 1);
            _field_used_ = BYTEVALUE;
          }
          return p;
        }
      }
    }
    public EntityRef* EntityRefValue {
      get {
        fixed (EntityRef* p = &_EntityRefValue) {
          if (_field_used_ != ENTITYREFVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = ENTITYREFVALUE;
          }
          return p;
        }
      }
    }
    public FP* FPValue {
      get {
        fixed (FP* p = &_FPValue) {
          if (_field_used_ != FPVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = FPVALUE;
          }
          return p;
        }
      }
    }
    public FPVector2* FPVector2Value {
      get {
        fixed (FPVector2* p = &_FPVector2Value) {
          if (_field_used_ != FPVECTOR2VALUE) {
            Native.Utils.Clear(p, 16);
            _field_used_ = FPVECTOR2VALUE;
          }
          return p;
        }
      }
    }
    public FPVector3* FPVector3Value {
      get {
        fixed (FPVector3* p = &_FPVector3Value) {
          if (_field_used_ != FPVECTOR3VALUE) {
            Native.Utils.Clear(p, 24);
            _field_used_ = FPVECTOR3VALUE;
          }
          return p;
        }
      }
    }
    public Int32* IntegerValue {
      get {
        fixed (Int32* p = &_IntegerValue) {
          if (_field_used_ != INTEGERVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = INTEGERVALUE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 263;
        hash = hash * 31 + _AssetRefValue.GetHashCode();
        hash = hash * 31 + _BooleanValue.GetHashCode();
        hash = hash * 31 + _ByteValue.GetHashCode();
        hash = hash * 31 + _EntityRefValue.GetHashCode();
        hash = hash * 31 + _FPValue.GetHashCode();
        hash = hash * 31 + _FPVector2Value.GetHashCode();
        hash = hash * 31 + _FPVector3Value.GetHashCode();
        hash = hash * 31 + _IntegerValue.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlackboardValue*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == ASSETREFVALUE) {
          AssetRef.Serialize(&p->_AssetRefValue, serializer);
        }
        if (p->_field_used_ == BOOLEANVALUE) {
          QBoolean.Serialize(&p->_BooleanValue, serializer);
        }
        if (p->_field_used_ == BYTEVALUE) {
          serializer.Stream.Serialize(&p->_ByteValue);
        }
        if (p->_field_used_ == ENTITYREFVALUE) {
          EntityRef.Serialize(&p->_EntityRefValue, serializer);
        }
        if (p->_field_used_ == FPVALUE) {
          FP.Serialize(&p->_FPValue, serializer);
        }
        if (p->_field_used_ == FPVECTOR2VALUE) {
          FPVector2.Serialize(&p->_FPVector2Value, serializer);
        }
        if (p->_field_used_ == FPVECTOR3VALUE) {
          FPVector3.Serialize(&p->_FPVector3Value, serializer);
        }
        if (p->_field_used_ == INTEGERVALUE) {
          serializer.Stream.Serialize(&p->_IntegerValue);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AIBlackboardComponent : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefAIBlackboard Board;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(BlackboardEntry))]
    private Quantum.Ptr EntriesPtr;
    public QListPtr<BlackboardEntry> Entries {
      get {
        return new QListPtr<BlackboardEntry>(EntriesPtr);
      }
      set {
        EntriesPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 269;
        hash = hash * 31 + Board.GetHashCode();
        hash = hash * 31 + EntriesPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      EntriesPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (AIBlackboardComponent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AIBlackboardComponent*)ptr;
        QList.Serialize(p->Entries, &p->EntriesPtr, serializer, StaticDelegates.SerializeBlackboardEntry);
        Quantum.AssetRefAIBlackboard.Serialize(&p->Board, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTAgent : Quantum.IComponent {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int32 AbortNodeId;
    [FieldOffset(4)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTService))]
    private Quantum.Ptr ActiveServicesPtr;
    [FieldOffset(8)]
    [FramePrinter.PtrQListAttribute(typeof(BTDataValue))]
    private Quantum.Ptr BTDataValuesPtr;
    [FieldOffset(24)]
    public AssetRefAIConfig Config;
    [FieldOffset(32)]
    public AssetRefBTNode Current;
    [FieldOffset(12)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTComposite))]
    private Quantum.Ptr DynamicCompositesPtr;
    [FieldOffset(16)]
    [FramePrinter.PtrQListAttribute(typeof(Byte))]
    private Quantum.Ptr NodesStatusPtr;
    [FieldOffset(20)]
    [FramePrinter.PtrQListAttribute(typeof(FP))]
    private Quantum.Ptr ServicesEndTimesPtr;
    [FieldOffset(40)]
    public AssetRefBTNode Tree;
    public QListPtr<AssetRefBTService> ActiveServices {
      get {
        return new QListPtr<AssetRefBTService>(ActiveServicesPtr);
      }
      set {
        ActiveServicesPtr = value.Ptr;
      }
    }
    public QListPtr<BTDataValue> BTDataValues {
      get {
        return new QListPtr<BTDataValue>(BTDataValuesPtr);
      }
      set {
        BTDataValuesPtr = value.Ptr;
      }
    }
    public QListPtr<AssetRefBTComposite> DynamicComposites {
      get {
        return new QListPtr<AssetRefBTComposite>(DynamicCompositesPtr);
      }
      set {
        DynamicCompositesPtr = value.Ptr;
      }
    }
    public QListPtr<Byte> NodesStatus {
      get {
        return new QListPtr<Byte>(NodesStatusPtr);
      }
      set {
        NodesStatusPtr = value.Ptr;
      }
    }
    public QListPtr<FP> ServicesEndTimes {
      get {
        return new QListPtr<FP>(ServicesEndTimesPtr);
      }
      set {
        ServicesEndTimesPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 271;
        hash = hash * 31 + AbortNodeId.GetHashCode();
        hash = hash * 31 + ActiveServicesPtr.GetHashCode();
        hash = hash * 31 + BTDataValuesPtr.GetHashCode();
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Current.GetHashCode();
        hash = hash * 31 + DynamicCompositesPtr.GetHashCode();
        hash = hash * 31 + NodesStatusPtr.GetHashCode();
        hash = hash * 31 + ServicesEndTimesPtr.GetHashCode();
        hash = hash * 31 + Tree.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ActiveServicesPtr = default;
      BTDataValuesPtr = default;
      DynamicCompositesPtr = default;
      NodesStatusPtr = default;
      ServicesEndTimesPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (BTAgent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTAgent*)ptr;
        serializer.Stream.Serialize(&p->AbortNodeId);
        QList.Serialize(p->ActiveServices, &p->ActiveServicesPtr, serializer, StaticDelegates.SerializeAssetRefBTService);
        QList.Serialize(p->BTDataValues, &p->BTDataValuesPtr, serializer, StaticDelegates.SerializeBTDataValue);
        QList.Serialize(p->DynamicComposites, &p->DynamicCompositesPtr, serializer, StaticDelegates.SerializeAssetRefBTComposite);
        QList.Serialize(p->NodesStatus, &p->NodesStatusPtr, serializer, StaticDelegates.SerializeByte);
        QList.Serialize(p->ServicesEndTimes, &p->ServicesEndTimesPtr, serializer, StaticDelegates.SerializeFP);
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.AssetRefBTNode.Serialize(&p->Current, serializer);
        Quantum.AssetRefBTNode.Serialize(&p->Tree, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CharacterInventory : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP PotionsHealth;
    [FieldOffset(8)]
    public FP PotionsMana;
    [FieldOffset(16)]
    public FP Wallet;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 277;
        hash = hash * 31 + PotionsHealth.GetHashCode();
        hash = hash * 31 + PotionsMana.GetHashCode();
        hash = hash * 31 + Wallet.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CharacterInventory*)ptr;
        FP.Serialize(&p->PotionsHealth, serializer);
        FP.Serialize(&p->PotionsMana, serializer);
        FP.Serialize(&p->Wallet, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CompoundBTAgent : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(BTAgent))]
    private Quantum.Ptr BTAgentsPtr;
    public QListPtr<BTAgent> BTAgents {
      get {
        return new QListPtr<BTAgent>(BTAgentsPtr);
      }
      set {
        BTAgentsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 281;
        hash = hash * 31 + BTAgentsPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      BTAgentsPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (CompoundBTAgent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CompoundBTAgent*)ptr;
        QList.Serialize(p->BTAgents, &p->BTAgentsPtr, serializer, StaticDelegates.SerializeBTAgent);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EntitySpawner : Quantum.IComponent {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefEntityPrototype))]
    private Quantum.Ptr EntityPrototypesPtr;
    [FieldOffset(8)]
    public FP MaxSpawnAmount;
    [FieldOffset(16)]
    [HideInInspector()]
    public FP NextSpawn;
    [FieldOffset(48)]
    [HideInInspector()]
    public RNGSession RNG;
    [FieldOffset(24)]
    public FP SpawnIntervalMax;
    [FieldOffset(32)]
    public FP SpawnIntervalMin;
    [FieldOffset(40)]
    public FP SpawnRadius;
    [FieldOffset(4)]
    [HideInInspector()]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr SpawnedPtr;
    public QListPtr<AssetRefEntityPrototype> EntityPrototypes {
      get {
        return new QListPtr<AssetRefEntityPrototype>(EntityPrototypesPtr);
      }
      set {
        EntityPrototypesPtr = value.Ptr;
      }
    }
    public QListPtr<EntityRef> Spawned {
      get {
        return new QListPtr<EntityRef>(SpawnedPtr);
      }
      set {
        SpawnedPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 283;
        hash = hash * 31 + EntityPrototypesPtr.GetHashCode();
        hash = hash * 31 + MaxSpawnAmount.GetHashCode();
        hash = hash * 31 + NextSpawn.GetHashCode();
        hash = hash * 31 + RNG.GetHashCode();
        hash = hash * 31 + SpawnIntervalMax.GetHashCode();
        hash = hash * 31 + SpawnIntervalMin.GetHashCode();
        hash = hash * 31 + SpawnRadius.GetHashCode();
        hash = hash * 31 + SpawnedPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      EntityPrototypesPtr = default;
      SpawnedPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (EntitySpawner*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EntitySpawner*)ptr;
        QList.Serialize(p->EntityPrototypes, &p->EntityPrototypesPtr, serializer, StaticDelegates.SerializeAssetRefEntityPrototype);
        QList.Serialize(p->Spawned, &p->SpawnedPtr, serializer, StaticDelegates.SerializeEntityRef);
        FP.Serialize(&p->MaxSpawnAmount, serializer);
        FP.Serialize(&p->NextSpawn, serializer);
        FP.Serialize(&p->SpawnIntervalMax, serializer);
        FP.Serialize(&p->SpawnIntervalMin, serializer);
        FP.Serialize(&p->SpawnRadius, serializer);
        RNGSession.Serialize(&p->RNG, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPAgent : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 293;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPAgent*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HFSMAgent : Quantum.IComponent {
    public const Int32 SIZE = 96;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefAIConfig Config;
    [FieldOffset(8)]
    public HFSMData Data;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 307;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Data.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HFSMAgent*)ptr;
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.HFSMData.Serialize(&p->Data, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Hazard : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [HideInInspector()]
    [FramePrinter.PtrQListAttribute(typeof(EntityTimer))]
    private Quantum.Ptr AlreadyDamagedPtr;
    [FieldOffset(8)]
    public FP DamageAmount;
    [FieldOffset(4)]
    [HideInInspector()]
    [FramePrinter.PtrQDictionaryAttribute(typeof(EntityRef), typeof(FP))]
    private Quantum.Ptr DamageDealtPtr;
    [FieldOffset(16)]
    public FP DamageInterval;
    public QListPtr<EntityTimer> AlreadyDamaged {
      get {
        return new QListPtr<EntityTimer>(AlreadyDamagedPtr);
      }
      set {
        AlreadyDamagedPtr = value.Ptr;
      }
    }
    public QDictionaryPtr<EntityRef, FP> DamageDealt {
      get {
        return new QDictionaryPtr<EntityRef, FP>(DamageDealtPtr);
      }
      set {
        DamageDealtPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 311;
        hash = hash * 31 + AlreadyDamagedPtr.GetHashCode();
        hash = hash * 31 + DamageAmount.GetHashCode();
        hash = hash * 31 + DamageDealtPtr.GetHashCode();
        hash = hash * 31 + DamageInterval.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      AlreadyDamagedPtr = default;
      DamageDealtPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Hazard*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Hazard*)ptr;
        QList.Serialize(p->AlreadyDamaged, &p->AlreadyDamagedPtr, serializer, StaticDelegates.SerializeEntityTimer);
        QDictionary.Serialize(p->DamageDealt, &p->DamageDealtPtr, serializer, StaticDelegates.SerializeEntityRef, StaticDelegates.SerializeFP);
        FP.Serialize(&p->DamageAmount, serializer);
        FP.Serialize(&p->DamageInterval, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Health : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP Amount;
    [FieldOffset(0)]
    [HideInInspector()]
    [FramePrinter.PtrQListAttribute(typeof(Damage))]
    private Quantum.Ptr DamageToAbsorbPtr;
    public QListPtr<Damage> DamageToAbsorb {
      get {
        return new QListPtr<Damage>(DamageToAbsorbPtr);
      }
      set {
        DamageToAbsorbPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 313;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + DamageToAbsorbPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      DamageToAbsorbPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Health*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Health*)ptr;
        QList.Serialize(p->DamageToAbsorb, &p->DamageToAbsorbPtr, serializer, StaticDelegates.SerializeDamage);
        FP.Serialize(&p->Amount, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Knockable : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 317;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Knockable*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Mana : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Amount;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 331;
        hash = hash * 31 + Amount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Mana*)ptr;
        FP.Serialize(&p->Amount, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PickUpSlot : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefItemBase Item;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 337;
        hash = hash * 31 + Item.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PickUpSlot*)ptr;
        Quantum.AssetRefItemBase.Serialize(&p->Item, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerID : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [HideInInspector()]
    public PlayerRef PlayerRef;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 347;
        hash = hash * 31 + PlayerRef.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerID*)ptr;
        PlayerRef.Serialize(&p->PlayerRef, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLink : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef Player;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 349;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLink*)ptr;
        PlayerRef.Serialize(&p->Player, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Projectile : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int32 DamageZoneQueryIndex;
    [FieldOffset(4)]
    public Int32 PathQueryIndex;
    [FieldOffset(16)]
    public FP Speed;
    [FieldOffset(8)]
    public AssetRefWeaponSpec WeaponSpec;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 353;
        hash = hash * 31 + DamageZoneQueryIndex.GetHashCode();
        hash = hash * 31 + PathQueryIndex.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        hash = hash * 31 + WeaponSpec.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Projectile*)ptr;
        serializer.Stream.Serialize(&p->DamageZoneQueryIndex);
        serializer.Stream.Serialize(&p->PathQueryIndex);
        Quantum.AssetRefWeaponSpec.Serialize(&p->WeaponSpec, serializer);
        FP.Serialize(&p->Speed, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct QAnimationState : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefClipData AttackAnimation;
    [FieldOffset(0)]
    [HideInInspector()]
    public QBoolean IsAnimating;
    [FieldOffset(16)]
    [HideInInspector()]
    public FP TimeLapsed;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 359;
        hash = hash * 31 + AttackAnimation.GetHashCode();
        hash = hash * 31 + IsAnimating.GetHashCode();
        hash = hash * 31 + TimeLapsed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QAnimationState*)ptr;
        QBoolean.Serialize(&p->IsAnimating, serializer);
        Quantum.AssetRefClipData.Serialize(&p->AttackAnimation, serializer);
        FP.Serialize(&p->TimeLapsed, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Shield : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP BlockPercentage;
    [FieldOffset(0)]
    [HideInInspector()]
    public QBoolean IsBlocking;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 367;
        hash = hash * 31 + BlockPercentage.GetHashCode();
        hash = hash * 31 + IsBlocking.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Shield*)ptr;
        QBoolean.Serialize(&p->IsBlocking, serializer);
        FP.Serialize(&p->BlockPercentage, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UTAgent : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 373;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UTAgent*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Weapon : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    [HideInInspector()]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr AlreadyHitPtr;
    [FieldOffset(0)]
    public QBoolean IsEquipped;
    [FieldOffset(8)]
    public AssetRefWeaponSpec WeaponSpec;
    public QListPtr<EntityRef> AlreadyHit {
      get {
        return new QListPtr<EntityRef>(AlreadyHitPtr);
      }
      set {
        AlreadyHitPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 379;
        hash = hash * 31 + AlreadyHitPtr.GetHashCode();
        hash = hash * 31 + IsEquipped.GetHashCode();
        hash = hash * 31 + WeaponSpec.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      AlreadyHitPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Weapon*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Weapon*)ptr;
        QBoolean.Serialize(&p->IsEquipped, serializer);
        QList.Serialize(p->AlreadyHit, &p->AlreadyHitPtr, serializer, StaticDelegates.SerializeEntityRef);
        Quantum.AssetRefWeaponSpec.Serialize(&p->WeaponSpec, serializer);
    }
  }
  public unsafe partial class Frame {
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    static partial void InitStaticGen() {
      ComponentTypeId.Setup(() => {
        ComponentTypeId.Add<Quantum.AIBlackboardComponent>(Quantum.AIBlackboardComponent.Serialize, null, Quantum.AIBlackboardComponent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.BTAgent>(Quantum.BTAgent.Serialize, null, Quantum.BTAgent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.CharacterInventory>(Quantum.CharacterInventory.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.CompoundBTAgent>(Quantum.CompoundBTAgent.Serialize, null, Quantum.CompoundBTAgent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.EntitySpawner>(Quantum.EntitySpawner.Serialize, null, Quantum.EntitySpawner.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.GOAPAgent>(Quantum.GOAPAgent.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.HFSMAgent>(Quantum.HFSMAgent.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Hazard>(Quantum.Hazard.Serialize, null, Quantum.Hazard.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Health>(Quantum.Health.Serialize, null, Quantum.Health.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Knockable>(Quantum.Knockable.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Mana>(Quantum.Mana.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PickUpSlot>(Quantum.PickUpSlot.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerID>(Quantum.PlayerID.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerLink>(Quantum.PlayerLink.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Projectile>(Quantum.Projectile.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.QAnimationState>(Quantum.QAnimationState.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Shield>(Quantum.Shield.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.UTAgent>(Quantum.UTAgent.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Weapon>(Quantum.Weapon.Serialize, null, Quantum.Weapon.OnRemoved, ComponentFlags.None);
      });
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities);
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.AIBlackboardComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AIBlackboardComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BTAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BTAgent>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.CharacterInventory>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CharacterInventory>();
      BuildSignalsArrayOnComponentAdded<Quantum.CompoundBTAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CompoundBTAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.EntitySpawner>();
      BuildSignalsArrayOnComponentRemoved<Quantum.EntitySpawner>();
      BuildSignalsArrayOnComponentAdded<Quantum.GOAPAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.GOAPAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.HFSMAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HFSMAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.Hazard>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Hazard>();
      BuildSignalsArrayOnComponentAdded<Quantum.Health>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Health>();
      BuildSignalsArrayOnComponentAdded<Quantum.Knockable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Knockable>();
      BuildSignalsArrayOnComponentAdded<Quantum.Mana>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Mana>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PickUpSlot>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PickUpSlot>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerID>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerID>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.Projectile>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Projectile>();
      BuildSignalsArrayOnComponentAdded<Quantum.QAnimationState>();
      BuildSignalsArrayOnComponentRemoved<Quantum.QAnimationState>();
      BuildSignalsArrayOnComponentAdded<Quantum.Shield>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Shield>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.UTAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.UTAgent>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
      BuildSignalsArrayOnComponentAdded<Quantum.Weapon>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Weapon>();
    }
    public void SetPlayerInput(Int32 player, Input input) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->MovementHorizontal = input.MovementHorizontal;
      i->MovementVertical = input.MovementVertical;
      i->MoveBack = i->MoveBack.Update(this.Number, input.MoveBack);
      i->ViewHorizontal = input.ViewHorizontal;
      i->ViewVertical = input.ViewVertical;
      i->Action = i->Action.Update(this.Number, input.Action);
      i->Attack = i->Attack.Update(this.Number, input.Attack);
      i->Defend = i->Defend.Update(this.Number, input.Defend);
      i->Jump = i->Jump.Update(this.Number, input.Jump);
      i->Direction = input.Direction;
      i->LookDelta = input.LookDelta;
    }
    public Input* GetPlayerInput(Int32 player) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    public unsafe partial struct FrameSignals {
    }
    public unsafe partial struct FrameEvents {
      public const Int32 EVENT_TYPE_COUNT = 12;
      public static Int32 GetParentEventID(Int32 eventID) {
        switch (eventID) {
          case EventOnDamageDealt.ID: return EventResourceEvent.ID;
          case EventOnUsedHealthPotion.ID: return EventResourceEvent.ID;
          case EventOnUsedManaPotion.ID: return EventResourceEvent.ID;
          case EventOnPickUpHealthPotion.ID: return EventResourceEvent.ID;
          case EventOnPickUpManaPotion.ID: return EventResourceEvent.ID;
          case EventOnPickUpCoins.ID: return EventResourceEvent.ID;
          default: return -1;
        }
      }
      public static System.Type GetEventType(Int32 eventID) {
        switch (eventID) {
          case EventPlayerAttack.ID: return typeof(EventPlayerAttack);
          case EventPlayerJump.ID: return typeof(EventPlayerJump);
          case EventPlayerWeaponEquip.ID: return typeof(EventPlayerWeaponEquip);
          case EventEnemyDeath.ID: return typeof(EventEnemyDeath);
          case EventResourceEvent.ID: return typeof(EventResourceEvent);
          case EventOnDamageDealt.ID: return typeof(EventOnDamageDealt);
          case EventOnUsedHealthPotion.ID: return typeof(EventOnUsedHealthPotion);
          case EventOnUsedManaPotion.ID: return typeof(EventOnUsedManaPotion);
          case EventOnPickUpHealthPotion.ID: return typeof(EventOnPickUpHealthPotion);
          case EventOnPickUpManaPotion.ID: return typeof(EventOnPickUpManaPotion);
          case EventOnPickUpCoins.ID: return typeof(EventOnPickUpCoins);
          case EventLookDirectionChanged.ID: return typeof(EventLookDirectionChanged);
          default: throw new System.ArgumentOutOfRangeException("eventID");
        }
      }
      public EventPlayerAttack PlayerAttack(PlayerRef PlayerRef) {
        var ev = _f.Context.AcquireEvent<EventPlayerAttack>(EventPlayerAttack.ID);
        ev.PlayerRef = PlayerRef;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlayerJump PlayerJump(PlayerRef PlayerRef) {
        var ev = _f.Context.AcquireEvent<EventPlayerJump>(EventPlayerJump.ID);
        ev.PlayerRef = PlayerRef;
        _f.AddEvent(ev);
        return ev;
      }
      public EventPlayerWeaponEquip PlayerWeaponEquip(PlayerRef PlayerRef, QBoolean Equip) {
        var ev = _f.Context.AcquireEvent<EventPlayerWeaponEquip>(EventPlayerWeaponEquip.ID);
        ev.PlayerRef = PlayerRef;
        ev.Equip = Equip;
        _f.AddEvent(ev);
        return ev;
      }
      public EventEnemyDeath EnemyDeath(EntityRef EntityRef) {
        var ev = _f.Context.AcquireEvent<EventEnemyDeath>(EventEnemyDeath.ID);
        ev.EntityRef = EntityRef;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnDamageDealt OnDamageDealt(FP Amount, EntityRef Target) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnDamageDealt>(EventOnDamageDealt.ID);
        ev.Amount = Amount;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnUsedHealthPotion OnUsedHealthPotion(FP Amount, EntityRef Target) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnUsedHealthPotion>(EventOnUsedHealthPotion.ID);
        ev.Amount = Amount;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnUsedManaPotion OnUsedManaPotion(FP Amount, EntityRef Target) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnUsedManaPotion>(EventOnUsedManaPotion.ID);
        ev.Amount = Amount;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPickUpHealthPotion OnPickUpHealthPotion(FP Amount, EntityRef Target) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPickUpHealthPotion>(EventOnPickUpHealthPotion.ID);
        ev.Amount = Amount;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPickUpManaPotion OnPickUpManaPotion(FP Amount, EntityRef Target) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPickUpManaPotion>(EventOnPickUpManaPotion.ID);
        ev.Amount = Amount;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPickUpCoins OnPickUpCoins(FP Amount, EntityRef Target) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPickUpCoins>(EventOnPickUpCoins.ID);
        ev.Amount = Amount;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventLookDirectionChanged LookDirectionChanged(FPVector3 direction) {
        var ev = _f.Context.AcquireEvent<EventLookDirectionChanged>(EventLookDirectionChanged.ID);
        ev.direction = direction;
        _f.AddEvent(ev);
        return ev;
      }
    }
    public unsafe partial struct FrameAssets {
      public BTNode BTNode(AssetRefBTNode assetRef) {
         return _f.FindAsset<BTNode>(assetRef.Id);
      }
      public BTService BTService(AssetRefBTService assetRef) {
         return _f.FindAsset<BTService>(assetRef.Id);
      }
      public BTComposite BTComposite(AssetRefBTComposite assetRef) {
         return _f.FindAsset<BTComposite>(assetRef.Id);
      }
      public BTDecorator BTDecorator(AssetRefBTDecorator assetRef) {
         return _f.FindAsset<BTDecorator>(assetRef.Id);
      }
      public BTRoot BTRoot(AssetRefBTRoot assetRef) {
         return _f.FindAsset<BTRoot>(assetRef.Id);
      }
      public AIAction AIAction(AssetRefAIAction assetRef) {
         return _f.FindAsset<AIAction>(assetRef.Id);
      }
      public AIFunction AIFunction(AssetRefAIFunction assetRef) {
         return _f.FindAsset<AIFunction>(assetRef.Id);
      }
      public AIConfig AIConfig(AssetRefAIConfig assetRef) {
         return _f.FindAsset<AIConfig>(assetRef.Id);
      }
      public GOAPRoot GOAPRoot(AssetRefGOAPRoot assetRef) {
         return _f.FindAsset<GOAPRoot>(assetRef.Id);
      }
      public GOAPGoal GOAPGoal(AssetRefGOAPGoal assetRef) {
         return _f.FindAsset<GOAPGoal>(assetRef.Id);
      }
      public GOAPAction GOAPAction(AssetRefGOAPAction assetRef) {
         return _f.FindAsset<GOAPAction>(assetRef.Id);
      }
      public GOAPBackValidation GOAPBackValidation(AssetRefGOAPBackValidation assetRef) {
         return _f.FindAsset<GOAPBackValidation>(assetRef.Id);
      }
      public GOAPHeuristic GOAPHeuristic(AssetRefGOAPHeuristic assetRef) {
         return _f.FindAsset<GOAPHeuristic>(assetRef.Id);
      }
      public HFSMRoot HFSMRoot(AssetRefHFSMRoot assetRef) {
         return _f.FindAsset<HFSMRoot>(assetRef.Id);
      }
      public HFSMState HFSMState(AssetRefHFSMState assetRef) {
         return _f.FindAsset<HFSMState>(assetRef.Id);
      }
      public HFSMDecision HFSMDecision(AssetRefHFSMDecision assetRef) {
         return _f.FindAsset<HFSMDecision>(assetRef.Id);
      }
      public HFSMTransitionSet HFSMTransitionSet(AssetRefHFSMTransitionSet assetRef) {
         return _f.FindAsset<HFSMTransitionSet>(assetRef.Id);
      }
      public UTRoot UTRoot(AssetRefUTRoot assetRef) {
         return _f.FindAsset<UTRoot>(assetRef.Id);
      }
      public Consideration Consideration(AssetRefConsideration assetRef) {
         return _f.FindAsset<Consideration>(assetRef.Id);
      }
      public AIBlackboard AIBlackboard(AssetRefAIBlackboard assetRef) {
         return _f.FindAsset<AIBlackboard>(assetRef.Id);
      }
      public AIBlackboardInitializer AIBlackboardInitializer(AssetRefAIBlackboardInitializer assetRef) {
         return _f.FindAsset<AIBlackboardInitializer>(assetRef.Id);
      }
      public ClipData ClipData(AssetRefClipData assetRef) {
         return _f.FindAsset<ClipData>(assetRef.Id);
      }
      public GameInitData GameInitData(AssetRefGameInitData assetRef) {
         return _f.FindAsset<GameInitData>(assetRef.Id);
      }
      public WeaponSpec WeaponSpec(AssetRefWeaponSpec assetRef) {
         return _f.FindAsset<WeaponSpec>(assetRef.Id);
      }
      public ItemBase ItemBase(AssetRefItemBase assetRef) {
         return _f.FindAsset<ItemBase>(assetRef.Id);
      }
    }
  }
  public unsafe partial class EventPlayerAttack : EventBase {
    public new const Int32 ID = 0;
    public PlayerRef PlayerRef;
    protected EventPlayerAttack(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerAttack() : 
        base(0, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 37;
        hash = hash * 31 + PlayerRef.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayerJump : EventBase {
    public new const Int32 ID = 1;
    public PlayerRef PlayerRef;
    protected EventPlayerJump(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerJump() : 
        base(1, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + PlayerRef.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventPlayerWeaponEquip : EventBase {
    public new const Int32 ID = 2;
    public PlayerRef PlayerRef;
    public QBoolean Equip;
    protected EventPlayerWeaponEquip(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventPlayerWeaponEquip() : 
        base(2, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + Equip.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventEnemyDeath : EventBase {
    public new const Int32 ID = 3;
    public EntityRef EntityRef;
    protected EventEnemyDeath(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventEnemyDeath() : 
        base(3, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + EntityRef.GetHashCode();
        return hash;
      }
    }
  }
  public abstract unsafe partial class EventResourceEvent : EventBase {
    public new const Int32 ID = 4;
    public FP Amount;
    public EntityRef Target;
    protected EventResourceEvent(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnDamageDealt : EventResourceEvent {
    public new const Int32 ID = 5;
    protected EventOnDamageDealt(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnDamageDealt() : 
        base(5, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnUsedHealthPotion : EventResourceEvent {
    public new const Int32 ID = 6;
    protected EventOnUsedHealthPotion(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnUsedHealthPotion() : 
        base(6, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnUsedManaPotion : EventResourceEvent {
    public new const Int32 ID = 7;
    protected EventOnUsedManaPotion(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnUsedManaPotion() : 
        base(7, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPickUpHealthPotion : EventResourceEvent {
    public new const Int32 ID = 8;
    protected EventOnPickUpHealthPotion(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPickUpHealthPotion() : 
        base(8, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPickUpManaPotion : EventResourceEvent {
    public new const Int32 ID = 9;
    protected EventOnPickUpManaPotion(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPickUpManaPotion() : 
        base(9, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPickUpCoins : EventResourceEvent {
    public new const Int32 ID = 10;
    protected EventOnPickUpCoins(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPickUpCoins() : 
        base(10, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventLookDirectionChanged : EventBase {
    public new const Int32 ID = 11;
    public FPVector3 direction;
    protected EventLookDirectionChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventLookDirectionChanged() : 
        base(11, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 83;
        hash = hash * 31 + direction.GetHashCode();
        return hash;
      }
    }
  }
  public static unsafe partial class BitStreamExtensions {
    public static void Serialize(this IBitStream stream, ref AssetRefAIAction value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIBlackboard value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIBlackboardInitializer value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIFunction value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTComposite value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTDecorator value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTNode value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTService value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefClipData value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefConsideration value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPAction value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPBackValidation value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPGoal value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPHeuristic value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGameInitData value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMDecision value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMState value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMTransitionSet value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefItemBase value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefUTRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefWeaponSpec value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class BTNode : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class BTService : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIAction : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIFunction : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIConfig : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPGoal : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPAction : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPBackValidation : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPHeuristic : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMState : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMDecision : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMTransitionSet : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class UTRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class Consideration : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIBlackboard : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIBlackboardInitializer : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class ClipData : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GameInitData : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class WeaponSpec : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class ItemBase : AssetObject {
  }
  public unsafe partial class ComponentPrototypeVisitor : Prototypes.ComponentPrototypeVisitorBase {
    public virtual void Visit(Prototypes.AIBlackboardComponent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.BTAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.CharacterInventory_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.CompoundBTAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.EntitySpawner_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.GOAPAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.HFSMAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Hazard_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Health_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Knockable_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Mana_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PickUpSlot_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerID_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerLink_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Projectile_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.QAnimationState_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Shield_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.UTAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Weapon_Prototype prototype) {
      VisitFallback(prototype);
    }
  }
  public static unsafe partial class Constants {
  }
  public static unsafe partial class StaticDelegates {
    public static FrameSerializer.Delegate SerializeBlackboardEntry;
    public static FrameSerializer.Delegate SerializeAssetRefBTService;
    public static FrameSerializer.Delegate SerializeBTDataValue;
    public static FrameSerializer.Delegate SerializeAssetRefBTComposite;
    public static FrameSerializer.Delegate SerializeByte;
    public static FrameSerializer.Delegate SerializeFP;
    public static FrameSerializer.Delegate SerializeAssetRefBTDecorator;
    public static FrameSerializer.Delegate SerializeBTAgent;
    public static FrameSerializer.Delegate SerializeAssetRefEntityPrototype;
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeEntityTimer;
    public static FrameSerializer.Delegate SerializeDamage;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitGen() {
      SerializeBlackboardEntry = Quantum.BlackboardEntry.Serialize;
      SerializeAssetRefBTService = Quantum.AssetRefBTService.Serialize;
      SerializeBTDataValue = Quantum.BTDataValue.Serialize;
      SerializeAssetRefBTComposite = Quantum.AssetRefBTComposite.Serialize;
      SerializeByte = (v, s) => {{ s.Stream.Serialize((Byte*)v); }};
      SerializeFP = FP.Serialize;
      SerializeAssetRefBTDecorator = Quantum.AssetRefBTDecorator.Serialize;
      SerializeBTAgent = Quantum.BTAgent.Serialize;
      SerializeAssetRefEntityPrototype = AssetRefEntityPrototype.Serialize;
      SerializeEntityRef = EntityRef.Serialize;
      SerializeEntityTimer = Quantum.EntityTimer.Serialize;
      SerializeDamage = Quantum.Damage.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
  }
  public unsafe partial class TypeRegistry {
    partial void AddGenerated() {
      Register(typeof(Quantum.AIBlackboardComponent), Quantum.AIBlackboardComponent.SIZE);
      Register(typeof(Quantum.AnimationFlag), 4);
      Register(typeof(AssetGuid), AssetGuid.SIZE);
      Register(typeof(AssetRef), AssetRef.SIZE);
      Register(typeof(Quantum.AssetRefAIAction), Quantum.AssetRefAIAction.SIZE);
      Register(typeof(Quantum.AssetRefAIBlackboard), Quantum.AssetRefAIBlackboard.SIZE);
      Register(typeof(Quantum.AssetRefAIBlackboardInitializer), Quantum.AssetRefAIBlackboardInitializer.SIZE);
      Register(typeof(Quantum.AssetRefAIConfig), Quantum.AssetRefAIConfig.SIZE);
      Register(typeof(Quantum.AssetRefAIFunction), Quantum.AssetRefAIFunction.SIZE);
      Register(typeof(Quantum.AssetRefBTComposite), Quantum.AssetRefBTComposite.SIZE);
      Register(typeof(Quantum.AssetRefBTDecorator), Quantum.AssetRefBTDecorator.SIZE);
      Register(typeof(Quantum.AssetRefBTNode), Quantum.AssetRefBTNode.SIZE);
      Register(typeof(Quantum.AssetRefBTRoot), Quantum.AssetRefBTRoot.SIZE);
      Register(typeof(Quantum.AssetRefBTService), Quantum.AssetRefBTService.SIZE);
      Register(typeof(AssetRefCharacterController2DConfig), AssetRefCharacterController2DConfig.SIZE);
      Register(typeof(AssetRefCharacterController3DConfig), AssetRefCharacterController3DConfig.SIZE);
      Register(typeof(Quantum.AssetRefClipData), Quantum.AssetRefClipData.SIZE);
      Register(typeof(Quantum.AssetRefConsideration), Quantum.AssetRefConsideration.SIZE);
      Register(typeof(AssetRefEntityPrototype), AssetRefEntityPrototype.SIZE);
      Register(typeof(AssetRefEntityView), AssetRefEntityView.SIZE);
      Register(typeof(Quantum.AssetRefGOAPAction), Quantum.AssetRefGOAPAction.SIZE);
      Register(typeof(Quantum.AssetRefGOAPBackValidation), Quantum.AssetRefGOAPBackValidation.SIZE);
      Register(typeof(Quantum.AssetRefGOAPGoal), Quantum.AssetRefGOAPGoal.SIZE);
      Register(typeof(Quantum.AssetRefGOAPHeuristic), Quantum.AssetRefGOAPHeuristic.SIZE);
      Register(typeof(Quantum.AssetRefGOAPRoot), Quantum.AssetRefGOAPRoot.SIZE);
      Register(typeof(Quantum.AssetRefGameInitData), Quantum.AssetRefGameInitData.SIZE);
      Register(typeof(Quantum.AssetRefHFSMDecision), Quantum.AssetRefHFSMDecision.SIZE);
      Register(typeof(Quantum.AssetRefHFSMRoot), Quantum.AssetRefHFSMRoot.SIZE);
      Register(typeof(Quantum.AssetRefHFSMState), Quantum.AssetRefHFSMState.SIZE);
      Register(typeof(Quantum.AssetRefHFSMTransitionSet), Quantum.AssetRefHFSMTransitionSet.SIZE);
      Register(typeof(Quantum.AssetRefItemBase), Quantum.AssetRefItemBase.SIZE);
      Register(typeof(AssetRefMap), AssetRefMap.SIZE);
      Register(typeof(AssetRefNavMesh), AssetRefNavMesh.SIZE);
      Register(typeof(AssetRefNavMeshAgentConfig), AssetRefNavMeshAgentConfig.SIZE);
      Register(typeof(AssetRefPhysicsMaterial), AssetRefPhysicsMaterial.SIZE);
      Register(typeof(AssetRefPolygonCollider), AssetRefPolygonCollider.SIZE);
      Register(typeof(AssetRefTerrainCollider), AssetRefTerrainCollider.SIZE);
      Register(typeof(Quantum.AssetRefUTRoot), Quantum.AssetRefUTRoot.SIZE);
      Register(typeof(Quantum.AssetRefWeaponSpec), Quantum.AssetRefWeaponSpec.SIZE);
      Register(typeof(Quantum.BTAgent), Quantum.BTAgent.SIZE);
      Register(typeof(Quantum.BTDataIndex), Quantum.BTDataIndex.SIZE);
      Register(typeof(Quantum.BTDataValue), Quantum.BTDataValue.SIZE);
      Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      Register(typeof(Quantum.BlackboardEntry), Quantum.BlackboardEntry.SIZE);
      Register(typeof(Quantum.BlackboardValue), Quantum.BlackboardValue.SIZE);
      Register(typeof(Quantum.BotSDKData), Quantum.BotSDKData.SIZE);
      Register(typeof(Button), Button.SIZE);
      Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      Register(typeof(Quantum.CharacterInventory), Quantum.CharacterInventory.SIZE);
      Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      Register(typeof(Quantum.CompoundBTAgent), Quantum.CompoundBTAgent.SIZE);
      Register(typeof(Quantum.Damage), Quantum.Damage.SIZE);
      Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      Register(typeof(Quantum.EWorldState), 4);
      Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      Register(typeof(EntityRef), EntityRef.SIZE);
      Register(typeof(Quantum.EntitySpawner), Quantum.EntitySpawner.SIZE);
      Register(typeof(Quantum.EntityTimer), Quantum.EntityTimer.SIZE);
      Register(typeof(FP), FP.SIZE);
      Register(typeof(FPBounds2), FPBounds2.SIZE);
      Register(typeof(FPBounds3), FPBounds3.SIZE);
      Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      Register(typeof(FPVector2), FPVector2.SIZE);
      Register(typeof(FPVector3), FPVector3.SIZE);
      Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      Register(typeof(Quantum.GOAPAgent), Quantum.GOAPAgent.SIZE);
      Register(typeof(Quantum.GOAPState), Quantum.GOAPState.SIZE);
      Register(typeof(Quantum.HFSMAgent), Quantum.HFSMAgent.SIZE);
      Register(typeof(Quantum.HFSMData), Quantum.HFSMData.SIZE);
      Register(typeof(Quantum.Hazard), Quantum.Hazard.SIZE);
      Register(typeof(Quantum.Health), Quantum.Health.SIZE);
      Register(typeof(HingeJoint), HingeJoint.SIZE);
      Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      Register(typeof(Hit), Hit.SIZE);
      Register(typeof(Hit3D), Hit3D.SIZE);
      Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      Register(typeof(Quantum.InputButtons), 4);
      Register(typeof(Joint), Joint.SIZE);
      Register(typeof(Joint3D), Joint3D.SIZE);
      Register(typeof(Quantum.Knockable), Quantum.Knockable.SIZE);
      Register(typeof(LayerMask), LayerMask.SIZE);
      Register(typeof(Quantum.Mana), Quantum.Mana.SIZE);
      Register(typeof(MapEntityId), MapEntityId.SIZE);
      Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      Register(typeof(NullableFP), NullableFP.SIZE);
      Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      Register(typeof(Quantum.PickUpSlot), Quantum.PickUpSlot.SIZE);
      Register(typeof(Quantum.PlayerID), Quantum.PlayerID.SIZE);
      Register(typeof(Quantum.PlayerLink), Quantum.PlayerLink.SIZE);
      Register(typeof(PlayerRef), PlayerRef.SIZE);
      Register(typeof(Quantum.Projectile), Quantum.Projectile.SIZE);
      Register(typeof(Ptr), Ptr.SIZE);
      Register(typeof(Quantum.QAnimationState), Quantum.QAnimationState.SIZE);
      Register(typeof(QBoolean), QBoolean.SIZE);
      Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      Register(typeof(RNGSession), RNGSession.SIZE);
      Register(typeof(Shape2D), Shape2D.SIZE);
      Register(typeof(Shape3D), Shape3D.SIZE);
      Register(typeof(Quantum.Shield), Quantum.Shield.SIZE);
      Register(typeof(SpringJoint), SpringJoint.SIZE);
      Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      Register(typeof(Transform2D), Transform2D.SIZE);
      Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      Register(typeof(Transform3D), Transform3D.SIZE);
      Register(typeof(Quantum.UTAgent), Quantum.UTAgent.SIZE);
      Register(typeof(Quantum.UTMomentumData), Quantum.UTMomentumData.SIZE);
      Register(typeof(Quantum.UTMomentumPack), Quantum.UTMomentumPack.SIZE);
      Register(typeof(View), View.SIZE);
      Register(typeof(Quantum.Weapon), Quantum.Weapon.SIZE);
      Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
  }
  public unsafe partial class FramePrinterGen {
    public static void EnsureNotStripped() {
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AnimationFlag>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIAction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIBlackboard>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIBlackboardInitializer>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIConfig>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIFunction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTComposite>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTDecorator>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTNode>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTService>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefClipData>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefConsideration>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPAction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPBackValidation>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPGoal>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPHeuristic>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGameInitData>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMDecision>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMTransitionSet>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefItemBase>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefUTRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefWeaponSpec>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EWorldState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
    }
  }
}
namespace Quantum.Prototypes {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  [System.SerializableAttribute()]
  [Prototype(typeof(AnimationFlag))]
  public unsafe partial struct AnimationFlag_Prototype {
    public Int32 Value;
    public static implicit operator AnimationFlag(AnimationFlag_Prototype value) {
        return (AnimationFlag)value.Value;
    }
    public static implicit operator AnimationFlag_Prototype(AnimationFlag value) {
        return new AnimationFlag_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EWorldState))]
  public unsafe partial struct EWorldState_Prototype {
    public UInt32 Value;
    public static implicit operator EWorldState(EWorldState_Prototype value) {
        return (EWorldState)value.Value;
    }
    public static implicit operator EWorldState_Prototype(EWorldState value) {
        return new EWorldState_Prototype() { Value = (UInt32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InputButtons))]
  public unsafe partial struct InputButtons_Prototype {
    public Int32 Value;
    public static implicit operator InputButtons(InputButtons_Prototype value) {
        return (InputButtons)value.Value;
    }
    public static implicit operator InputButtons_Prototype(InputButtons value) {
        return new InputButtons_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(KeyValuePair<EntityRef, FP>))]
  public unsafe partial class DictionaryEntry_EntityRef_FP_Prototype : DictionaryEntryPrototype {
    public MapEntityId Key;
    public FP Value;
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AIBlackboardComponent))]
  public sealed unsafe partial class AIBlackboardComponent_Prototype : ComponentPrototype<AIBlackboardComponent> {
    public AssetRefAIBlackboard Board;
    [DynamicCollectionAttribute()]
    public BlackboardEntry_Prototype[] Entries = {};
    partial void MaterializeUser(Frame frame, ref AIBlackboardComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      AIBlackboardComponent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref AIBlackboardComponent result, in PrototypeMaterializationContext context) {
      result.Board = this.Board;
      if (this.Entries.Length == 0) {
        result.Entries = default;
      } else {
        var list = frame.AllocateList(result.Entries, this.Entries.Length);
        for (int i = 0; i < this.Entries.Length; ++i) {
          Quantum.BlackboardEntry tmp = default;
          this.Entries[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.Entries = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTAgent))]
  public sealed unsafe partial class BTAgent_Prototype : ComponentPrototype<BTAgent> {
    public AssetRefBTNode Tree;
    public AssetRefBTNode Current;
    [DynamicCollectionAttribute()]
    public Byte[] NodesStatus = {};
    [DynamicCollectionAttribute()]
    public FP[] ServicesEndTimes = {};
    [DynamicCollectionAttribute()]
    public BTDataValue_Prototype[] BTDataValues = {};
    [DynamicCollectionAttribute()]
    public AssetRefBTService[] ActiveServices = {};
    [DynamicCollectionAttribute()]
    public AssetRefBTComposite[] DynamicComposites = {};
    public AssetRefAIConfig Config;
    public Int32 AbortNodeId;
    partial void MaterializeUser(Frame frame, ref BTAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      BTAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref BTAgent result, in PrototypeMaterializationContext context) {
      result.AbortNodeId = this.AbortNodeId;
      if (this.ActiveServices.Length == 0) {
        result.ActiveServices = default;
      } else {
        var list = frame.AllocateList(result.ActiveServices, this.ActiveServices.Length);
        for (int i = 0; i < this.ActiveServices.Length; ++i) {
          Quantum.AssetRefBTService tmp = default;
          tmp = this.ActiveServices[i];
          list.Add(tmp);
        }
        result.ActiveServices = list;
      }
      if (this.BTDataValues.Length == 0) {
        result.BTDataValues = default;
      } else {
        var list = frame.AllocateList(result.BTDataValues, this.BTDataValues.Length);
        for (int i = 0; i < this.BTDataValues.Length; ++i) {
          Quantum.BTDataValue tmp = default;
          this.BTDataValues[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.BTDataValues = list;
      }
      result.Config = this.Config;
      result.Current = this.Current;
      if (this.DynamicComposites.Length == 0) {
        result.DynamicComposites = default;
      } else {
        var list = frame.AllocateList(result.DynamicComposites, this.DynamicComposites.Length);
        for (int i = 0; i < this.DynamicComposites.Length; ++i) {
          Quantum.AssetRefBTComposite tmp = default;
          tmp = this.DynamicComposites[i];
          list.Add(tmp);
        }
        result.DynamicComposites = list;
      }
      if (this.NodesStatus.Length == 0) {
        result.NodesStatus = default;
      } else {
        var list = frame.AllocateList(result.NodesStatus, this.NodesStatus.Length);
        for (int i = 0; i < this.NodesStatus.Length; ++i) {
          Byte tmp = default;
          tmp = this.NodesStatus[i];
          list.Add(tmp);
        }
        result.NodesStatus = list;
      }
      if (this.ServicesEndTimes.Length == 0) {
        result.ServicesEndTimes = default;
      } else {
        var list = frame.AllocateList(result.ServicesEndTimes, this.ServicesEndTimes.Length);
        for (int i = 0; i < this.ServicesEndTimes.Length; ++i) {
          FP tmp = default;
          tmp = this.ServicesEndTimes[i];
          list.Add(tmp);
        }
        result.ServicesEndTimes = list;
      }
      result.Tree = this.Tree;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTDataIndex))]
  public sealed unsafe partial class BTDataIndex_Prototype : StructPrototype {
    public Int32 Index;
    partial void MaterializeUser(Frame frame, ref BTDataIndex result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BTDataIndex result, in PrototypeMaterializationContext context) {
      result.Index = this.Index;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTDataValue))]
  public sealed unsafe partial class BTDataValue_Prototype : UnionPrototype {
    public string _field_used_;
    public FP FPValue;
    public Int32 IntValue;
    partial void MaterializeUser(Frame frame, ref BTDataValue result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BTDataValue result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "FPVALUE": *result.FPValue = this.FPValue; break;
        case "INTVALUE": *result.IntValue = this.IntValue; break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BlackboardEntry))]
  public sealed unsafe partial class BlackboardEntry_Prototype : StructPrototype {
    public BlackboardValue_Prototype Value;
    [DynamicCollectionAttribute()]
    public AssetRefBTDecorator[] ReactiveDecorators = {};
    partial void MaterializeUser(Frame frame, ref BlackboardEntry result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlackboardEntry result, in PrototypeMaterializationContext context) {
      if (this.ReactiveDecorators.Length == 0) {
        result.ReactiveDecorators = default;
      } else {
        var list = frame.AllocateList(result.ReactiveDecorators, this.ReactiveDecorators.Length);
        for (int i = 0; i < this.ReactiveDecorators.Length; ++i) {
          Quantum.AssetRefBTDecorator tmp = default;
          tmp = this.ReactiveDecorators[i];
          list.Add(tmp);
        }
        result.ReactiveDecorators = list;
      }
      this.Value.Materialize(frame, ref result.Value, in context);
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BlackboardValue))]
  public sealed unsafe partial class BlackboardValue_Prototype : UnionPrototype {
    public string _field_used_;
    public QBoolean BooleanValue;
    public Byte ByteValue;
    public Int32 IntegerValue;
    public FP FPValue;
    public FPVector2 FPVector2Value;
    public FPVector3 FPVector3Value;
    public MapEntityId EntityRefValue;
    public AssetRef AssetRefValue;
    partial void MaterializeUser(Frame frame, ref BlackboardValue result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlackboardValue result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "ASSETREFVALUE": *result.AssetRefValue = this.AssetRefValue; break;
        case "BOOLEANVALUE": *result.BooleanValue = this.BooleanValue; break;
        case "BYTEVALUE": *result.ByteValue = this.ByteValue; break;
        case "ENTITYREFVALUE": PrototypeValidator.FindMapEntity(this.EntityRefValue, in context, out *result.EntityRefValue); break;
        case "FPVALUE": *result.FPValue = this.FPValue; break;
        case "FPVECTOR2VALUE": *result.FPVector2Value = this.FPVector2Value; break;
        case "FPVECTOR3VALUE": *result.FPVector3Value = this.FPVector3Value; break;
        case "INTEGERVALUE": *result.IntegerValue = this.IntegerValue; break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BotSDKData))]
  public sealed unsafe partial class BotSDKData_Prototype : StructPrototype {
    public FP OriginalDeltaTime;
    public Int32 ElapsedTicks;
    public FP ElapsedPartialTicks;
    partial void MaterializeUser(Frame frame, ref BotSDKData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BotSDKData result, in PrototypeMaterializationContext context) {
      result.ElapsedPartialTicks = this.ElapsedPartialTicks;
      result.ElapsedTicks = this.ElapsedTicks;
      result.OriginalDeltaTime = this.OriginalDeltaTime;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(CharacterInventory))]
  public sealed unsafe partial class CharacterInventory_Prototype : ComponentPrototype<CharacterInventory> {
    public FP Wallet;
    public FP PotionsMana;
    public FP PotionsHealth;
    partial void MaterializeUser(Frame frame, ref CharacterInventory result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      CharacterInventory component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref CharacterInventory result, in PrototypeMaterializationContext context) {
      result.PotionsHealth = this.PotionsHealth;
      result.PotionsMana = this.PotionsMana;
      result.Wallet = this.Wallet;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(CompoundBTAgent))]
  public sealed unsafe partial class CompoundBTAgent_Prototype : ComponentPrototype<CompoundBTAgent> {
    [DynamicCollectionAttribute()]
    public BTAgent_Prototype[] BTAgents = {};
    partial void MaterializeUser(Frame frame, ref CompoundBTAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      CompoundBTAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref CompoundBTAgent result, in PrototypeMaterializationContext context) {
      if (this.BTAgents.Length == 0) {
        result.BTAgents = default;
      } else {
        var list = frame.AllocateList(result.BTAgents, this.BTAgents.Length);
        for (int i = 0; i < this.BTAgents.Length; ++i) {
          Quantum.BTAgent tmp = default;
          this.BTAgents[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.BTAgents = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Damage))]
  public sealed unsafe partial class Damage_Prototype : StructPrototype {
    public FP Amount;
    public QBoolean IsDiscrete;
    public MapEntityId Target;
    public MapEntityId Origin;
    partial void MaterializeUser(Frame frame, ref Damage result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Damage result, in PrototypeMaterializationContext context) {
      result.Amount = this.Amount;
      result.IsDiscrete = this.IsDiscrete;
      PrototypeValidator.FindMapEntity(this.Origin, in context, out result.Origin);
      PrototypeValidator.FindMapEntity(this.Target, in context, out result.Target);
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EntitySpawner))]
  public sealed unsafe partial class EntitySpawner_Prototype : ComponentPrototype<EntitySpawner> {
    [HideInInspector()]
    public RNGSession RNG;
    [HideInInspector()]
    [DynamicCollectionAttribute()]
    public MapEntityId[] Spawned = {};
    [HideInInspector()]
    public FP NextSpawn;
    public FP SpawnRadius;
    public FP SpawnIntervalMin;
    public FP SpawnIntervalMax;
    public FP MaxSpawnAmount;
    [DynamicCollectionAttribute()]
    public AssetRefEntityPrototype[] EntityPrototypes = {};
    partial void MaterializeUser(Frame frame, ref EntitySpawner result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      EntitySpawner component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref EntitySpawner result, in PrototypeMaterializationContext context) {
      if (this.EntityPrototypes.Length == 0) {
        result.EntityPrototypes = default;
      } else {
        var list = frame.AllocateList(result.EntityPrototypes, this.EntityPrototypes.Length);
        for (int i = 0; i < this.EntityPrototypes.Length; ++i) {
          AssetRefEntityPrototype tmp = default;
          tmp = this.EntityPrototypes[i];
          list.Add(tmp);
        }
        result.EntityPrototypes = list;
      }
      result.MaxSpawnAmount = this.MaxSpawnAmount;
      result.NextSpawn = this.NextSpawn;
      result.RNG = this.RNG;
      result.SpawnIntervalMax = this.SpawnIntervalMax;
      result.SpawnIntervalMin = this.SpawnIntervalMin;
      result.SpawnRadius = this.SpawnRadius;
      if (this.Spawned.Length == 0) {
        result.Spawned = default;
      } else {
        var list = frame.AllocateList(result.Spawned, this.Spawned.Length);
        for (int i = 0; i < this.Spawned.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.Spawned[i], in context, out tmp);
          list.Add(tmp);
        }
        result.Spawned = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EntityTimer))]
  public sealed unsafe partial class EntityTimer_Prototype : StructPrototype {
    public MapEntityId Entity;
    public FP Timer;
    partial void MaterializeUser(Frame frame, ref EntityTimer result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref EntityTimer result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.Entity, in context, out result.Entity);
      result.Timer = this.Timer;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GOAPAgent))]
  public sealed unsafe partial class GOAPAgent_Prototype : ComponentPrototype<GOAPAgent> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref GOAPAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      GOAPAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref GOAPAgent result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GOAPState))]
  public sealed unsafe partial class GOAPState_Prototype : StructPrototype {
    public EWorldState_Prototype Positive;
    public EWorldState_Prototype Negative;
    partial void MaterializeUser(Frame frame, ref GOAPState result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref GOAPState result, in PrototypeMaterializationContext context) {
      result.Negative = this.Negative;
      result.Positive = this.Positive;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HFSMAgent))]
  public sealed unsafe partial class HFSMAgent_Prototype : ComponentPrototype<HFSMAgent> {
    public HFSMData_Prototype Data;
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref HFSMAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      HFSMAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref HFSMAgent result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      this.Data.Materialize(frame, ref result.Data, in context);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HFSMData))]
  public sealed unsafe partial class HFSMData_Prototype : StructPrototype {
    public AssetRefHFSMRoot Root;
    public AssetRefHFSMState CurrentState;
    public FP Time;
    [ArrayLengthAttribute(8)]
    public FP[] Times = new FP[8];
    partial void MaterializeUser(Frame frame, ref HFSMData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref HFSMData result, in PrototypeMaterializationContext context) {
      result.CurrentState = this.CurrentState;
      result.Root = this.Root;
      result.Time = this.Time;
      for (int i = 0, count = PrototypeValidator.CheckLength(Times, 8, in context); i < count; ++i) {
        *result.Times.GetPointer(i) = this.Times[i];
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Hazard))]
  public sealed unsafe partial class Hazard_Prototype : ComponentPrototype<Hazard> {
    [HideInInspector()]
    [DynamicCollectionAttribute()]
    public EntityTimer_Prototype[] AlreadyDamaged = {};
    [HideInInspector()]
    [DictionaryAttribute()]
    [DynamicCollectionAttribute()]
    public DictionaryEntry_EntityRef_FP_Prototype[] DamageDealt = {};
    public FP DamageInterval;
    public FP DamageAmount;
    partial void MaterializeUser(Frame frame, ref Hazard result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Hazard component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Hazard result, in PrototypeMaterializationContext context) {
      if (this.AlreadyDamaged.Length == 0) {
        result.AlreadyDamaged = default;
      } else {
        var list = frame.AllocateList(result.AlreadyDamaged, this.AlreadyDamaged.Length);
        for (int i = 0; i < this.AlreadyDamaged.Length; ++i) {
          Quantum.EntityTimer tmp = default;
          this.AlreadyDamaged[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.AlreadyDamaged = list;
      }
      result.DamageAmount = this.DamageAmount;
      if (this.DamageDealt.Length == 0) {
        result.DamageDealt = default;
      } else {
        var dict = frame.AllocateDictionary(result.DamageDealt, this.DamageDealt.Length);
        for (int i = 0; i < this.DamageDealt.Length; ++i) {
          EntityRef tmpKey = default;
          FP tmpValue = default;
          PrototypeValidator.FindMapEntity(this.DamageDealt[i].Key, in context, out tmpKey);
          tmpValue = this.DamageDealt[i].Value;
          PrototypeValidator.AddToDictionary(dict, tmpKey, tmpValue, in context);
        }
        result.DamageDealt = dict;
      }
      result.DamageInterval = this.DamageInterval;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Health))]
  public sealed unsafe partial class Health_Prototype : ComponentPrototype<Health> {
    public FP Amount;
    [HideInInspector()]
    [DynamicCollectionAttribute()]
    public Damage_Prototype[] DamageToAbsorb = {};
    partial void MaterializeUser(Frame frame, ref Health result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Health component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Health result, in PrototypeMaterializationContext context) {
      result.Amount = this.Amount;
      if (this.DamageToAbsorb.Length == 0) {
        result.DamageToAbsorb = default;
      } else {
        var list = frame.AllocateList(result.DamageToAbsorb, this.DamageToAbsorb.Length);
        for (int i = 0; i < this.DamageToAbsorb.Length; ++i) {
          Quantum.Damage tmp = default;
          this.DamageToAbsorb[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.DamageToAbsorb = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Input))]
  public sealed unsafe partial class Input_Prototype : StructPrototype {
    public FP MovementHorizontal;
    public FP MovementVertical;
    public Button MoveBack;
    public FP ViewHorizontal;
    public FP ViewVertical;
    public Button Action;
    public Button Attack;
    public Button Defend;
    public Button Jump;
    public FPVector2 Direction;
    public FPVector2 LookDelta;
    partial void MaterializeUser(Frame frame, ref Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Input result, in PrototypeMaterializationContext context) {
      result.Action = this.Action;
      result.Attack = this.Attack;
      result.Defend = this.Defend;
      result.Direction = this.Direction;
      result.Jump = this.Jump;
      result.LookDelta = this.LookDelta;
      result.MoveBack = this.MoveBack;
      result.MovementHorizontal = this.MovementHorizontal;
      result.MovementVertical = this.MovementVertical;
      result.ViewHorizontal = this.ViewHorizontal;
      result.ViewVertical = this.ViewVertical;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Knockable))]
  public sealed unsafe partial class Knockable_Prototype : ComponentPrototype<Knockable> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Knockable result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Knockable component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Knockable result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Mana))]
  public sealed unsafe partial class Mana_Prototype : ComponentPrototype<Mana> {
    public FP Amount;
    partial void MaterializeUser(Frame frame, ref Mana result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Mana component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Mana result, in PrototypeMaterializationContext context) {
      result.Amount = this.Amount;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PickUpSlot))]
  public sealed unsafe partial class PickUpSlot_Prototype : ComponentPrototype<PickUpSlot> {
    public AssetRefItemBase Item;
    partial void MaterializeUser(Frame frame, ref PickUpSlot result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PickUpSlot component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PickUpSlot result, in PrototypeMaterializationContext context) {
      result.Item = this.Item;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerID))]
  public sealed unsafe partial class PlayerID_Prototype : ComponentPrototype<PlayerID> {
    [HideInInspector()]
    public PlayerRef PlayerRef;
    partial void MaterializeUser(Frame frame, ref PlayerID result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerID component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerID result, in PrototypeMaterializationContext context) {
      result.PlayerRef = this.PlayerRef;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerLink))]
  public sealed unsafe partial class PlayerLink_Prototype : ComponentPrototype<PlayerLink> {
    public PlayerRef Player;
    partial void MaterializeUser(Frame frame, ref PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerLink component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerLink result, in PrototypeMaterializationContext context) {
      result.Player = this.Player;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Projectile))]
  public sealed unsafe partial class Projectile_Prototype : ComponentPrototype<Projectile> {
    public FP Speed;
    public AssetRefWeaponSpec WeaponSpec;
    public Int32 PathQueryIndex;
    public Int32 DamageZoneQueryIndex;
    partial void MaterializeUser(Frame frame, ref Projectile result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Projectile component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Projectile result, in PrototypeMaterializationContext context) {
      result.DamageZoneQueryIndex = this.DamageZoneQueryIndex;
      result.PathQueryIndex = this.PathQueryIndex;
      result.Speed = this.Speed;
      result.WeaponSpec = this.WeaponSpec;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(QAnimationState))]
  public sealed unsafe partial class QAnimationState_Prototype : ComponentPrototype<QAnimationState> {
    public AssetRefClipData AttackAnimation;
    [HideInInspector()]
    public QBoolean IsAnimating;
    [HideInInspector()]
    public FP TimeLapsed;
    partial void MaterializeUser(Frame frame, ref QAnimationState result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      QAnimationState component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref QAnimationState result, in PrototypeMaterializationContext context) {
      result.AttackAnimation = this.AttackAnimation;
      result.IsAnimating = this.IsAnimating;
      result.TimeLapsed = this.TimeLapsed;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Shield))]
  public sealed unsafe partial class Shield_Prototype : ComponentPrototype<Shield> {
    [HideInInspector()]
    public QBoolean IsBlocking;
    public FP BlockPercentage;
    partial void MaterializeUser(Frame frame, ref Shield result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Shield component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Shield result, in PrototypeMaterializationContext context) {
      result.BlockPercentage = this.BlockPercentage;
      result.IsBlocking = this.IsBlocking;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UTAgent))]
  public sealed unsafe partial class UTAgent_Prototype : ComponentPrototype<UTAgent> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref UTAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      UTAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref UTAgent result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UTMomentumData))]
  public sealed unsafe partial class UTMomentumData_Prototype : StructPrototype {
    public Int32 Value;
    public Byte DecayAmount;
    partial void MaterializeUser(Frame frame, ref UTMomentumData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UTMomentumData result, in PrototypeMaterializationContext context) {
      result.DecayAmount = this.DecayAmount;
      result.Value = this.Value;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UTMomentumPack))]
  public sealed unsafe partial class UTMomentumPack_Prototype : StructPrototype {
    public AssetRefConsideration ConsiderationRef;
    public UTMomentumData_Prototype MomentumData;
    partial void MaterializeUser(Frame frame, ref UTMomentumPack result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UTMomentumPack result, in PrototypeMaterializationContext context) {
      result.ConsiderationRef = this.ConsiderationRef;
      this.MomentumData.Materialize(frame, ref result.MomentumData, in context);
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Weapon))]
  public sealed unsafe partial class Weapon_Prototype : ComponentPrototype<Weapon> {
    public QBoolean IsEquipped;
    public AssetRefWeaponSpec WeaponSpec;
    [HideInInspector()]
    [DynamicCollectionAttribute()]
    public MapEntityId[] AlreadyHit = {};
    partial void MaterializeUser(Frame frame, ref Weapon result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Weapon component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Weapon result, in PrototypeMaterializationContext context) {
      if (this.AlreadyHit.Length == 0) {
        result.AlreadyHit = default;
      } else {
        var list = frame.AllocateList(result.AlreadyHit, this.AlreadyHit.Length);
        for (int i = 0; i < this.AlreadyHit.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.AlreadyHit[i], in context, out tmp);
          list.Add(tmp);
        }
        result.AlreadyHit = list;
      }
      result.IsEquipped = this.IsEquipped;
      result.WeaponSpec = this.WeaponSpec;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  public unsafe partial class FlatEntityPrototypeContainer {
    [ArrayLength(0, 1)]
    public List<Prototypes.AIBlackboardComponent_Prototype> AIBlackboardComponent;
    [ArrayLength(0, 1)]
    public List<Prototypes.BTAgent_Prototype> BTAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.CharacterInventory_Prototype> CharacterInventory;
    [ArrayLength(0, 1)]
    public List<Prototypes.CompoundBTAgent_Prototype> CompoundBTAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.EntitySpawner_Prototype> EntitySpawner;
    [ArrayLength(0, 1)]
    public List<Prototypes.GOAPAgent_Prototype> GOAPAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.HFSMAgent_Prototype> HFSMAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.Hazard_Prototype> Hazard;
    [ArrayLength(0, 1)]
    public List<Prototypes.Health_Prototype> Health;
    [ArrayLength(0, 1)]
    public List<Prototypes.Knockable_Prototype> Knockable;
    [ArrayLength(0, 1)]
    public List<Prototypes.Mana_Prototype> Mana;
    [ArrayLength(0, 1)]
    public List<Prototypes.PickUpSlot_Prototype> PickUpSlot;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerID_Prototype> PlayerID;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerLink_Prototype> PlayerLink;
    [ArrayLength(0, 1)]
    public List<Prototypes.Projectile_Prototype> Projectile;
    [ArrayLength(0, 1)]
    public List<Prototypes.QAnimationState_Prototype> QAnimationState;
    [ArrayLength(0, 1)]
    public List<Prototypes.Shield_Prototype> Shield;
    [ArrayLength(0, 1)]
    public List<Prototypes.UTAgent_Prototype> UTAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.Weapon_Prototype> Weapon;
    partial void CollectGen(List<ComponentPrototype> target) {
      Collect(AIBlackboardComponent, target);
      Collect(BTAgent, target);
      Collect(CharacterInventory, target);
      Collect(CompoundBTAgent, target);
      Collect(EntitySpawner, target);
      Collect(GOAPAgent, target);
      Collect(HFSMAgent, target);
      Collect(Hazard, target);
      Collect(Health, target);
      Collect(Knockable, target);
      Collect(Mana, target);
      Collect(PickUpSlot, target);
      Collect(PlayerID, target);
      Collect(PlayerLink, target);
      Collect(Projectile, target);
      Collect(QAnimationState, target);
      Collect(Shield, target);
      Collect(UTAgent, target);
      Collect(Weapon, target);
    }
    public unsafe partial class StoreVisitor {
      public override void Visit(Prototypes.AIBlackboardComponent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.AIBlackboardComponent);
      }
      public override void Visit(Prototypes.BTAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.BTAgent);
      }
      public override void Visit(Prototypes.CharacterInventory_Prototype prototype) {
        Storage.Store(prototype, ref Storage.CharacterInventory);
      }
      public override void Visit(Prototypes.CompoundBTAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.CompoundBTAgent);
      }
      public override void Visit(Prototypes.EntitySpawner_Prototype prototype) {
        Storage.Store(prototype, ref Storage.EntitySpawner);
      }
      public override void Visit(Prototypes.GOAPAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.GOAPAgent);
      }
      public override void Visit(Prototypes.HFSMAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.HFSMAgent);
      }
      public override void Visit(Prototypes.Hazard_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Hazard);
      }
      public override void Visit(Prototypes.Health_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Health);
      }
      public override void Visit(Prototypes.Knockable_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Knockable);
      }
      public override void Visit(Prototypes.Mana_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Mana);
      }
      public override void Visit(Prototypes.PickUpSlot_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PickUpSlot);
      }
      public override void Visit(Prototypes.PlayerID_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerID);
      }
      public override void Visit(Prototypes.PlayerLink_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerLink);
      }
      public override void Visit(Prototypes.Projectile_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Projectile);
      }
      public override void Visit(Prototypes.QAnimationState_Prototype prototype) {
        Storage.Store(prototype, ref Storage.QAnimationState);
      }
      public override void Visit(Prototypes.Shield_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Shield);
      }
      public override void Visit(Prototypes.UTAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.UTAgent);
      }
      public override void Visit(Prototypes.Weapon_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Weapon);
      }
    }
  }
}
#pragma warning restore 0649
#pragma warning restore 1522
#pragma warning restore 0414
#pragma warning restore 0219
#pragma warning restore 0109
